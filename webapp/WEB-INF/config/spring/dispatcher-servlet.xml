<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:faces="http://www.springframework.org/schema/faces"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/faces http://www.springframework.org/schema/faces/spring-faces-2.4.xsd" >

    <import resource="webflow.xml"/>
    <import resource="controllers.xml"/>

    <!--To scanning components with DispatcherServlet from base-package -->
    <context:component-scan base-package="com.planrest"/>

    <faces:resources/>

    <!--Where are our static resources located.. -->
    <mvc:resources  location="/resources/" mapping="/resources/**" />

    <!--Working with Views. XHTML files that are not related to WebFlows-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.faces.mvc.JsfView"/>
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".xhtml"/>
    </bean>



    <!--Working with mapping CSS and other resources to connect with JSF pages...-->

    <!--Help us to load CSS files and other resources-->
    <bean name="resourceHandlerJSF" class="org.springframework.faces.webflow.JsfResourceRequestHandler" />

    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <!--Means that this Mapping will load earlier than FlowHandlerMapping. Because
            FlowHandlerMapping can't handle automatically requests of types CSS and etc.-->
        <property name="order" value="1" />

        <property name="mappings">
            <value>
                <!--Only requests of this type! Ref on resourceHandlerJSF-->
                /javax.faces.resource/**=resourceHandlerJSF
            </value>
        </property>
    </bean>



    <!--Working with WebFlows...-->

    <!--So that requests can be processed with flows. Ref on flowRegistry in webflow.xml-->
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
        <property name="flowRegistry" ref="flowRegistry"/>
        <property name="order" value="2"/>
    </bean>

    <!--Adapter, that ref on flowExecutor in webflow.xml. All our flows will process with SpringWebFlow,
    that connected with JSF pages-->
    <bean class="org.springframework.faces.webflow.JsfFlowHandlerAdapter">
        <property name="flowExecutor" ref="flowExecutor"/>
    </bean>




    <!--Working with Locales...-->

    <!--Reference on our ResourceBundle files (.properties)-->
    <bean id="msg" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="/WEB-INF/locales/messages"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <!--Bean that works with locale and stores it in session-->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="en"/>
    </bean>

    <!--Used for intercept locale switching, that comes as a parameter "lang" and
        this interceptor will switch the language-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <property name="paramName" value="lang"/>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>



    <!--Working with DB...-->

    <!--Used for connection Hibernate not directly to DB but through our datasource in GlassFish-->
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="jdbc/PlanRest"/>
    </bean>

    <!--Used for create session based on some configurations-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!--TODO: connect with EntityManagerBuilder-->
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml" />

    </bean>

    <!--So that Transaction Manager could find annotations automatically-->
    <tx:annotation-driven />

    <!--Transaction Manager for Hibernate-->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>



    <!--Working with Servlet-->
    <bean class="org.springframework.web.context.support.ServletContextAttributeExporter">
        <property name="attributes">
            <map>
                <entry key="userPageComponent" value-ref="userPageComponent"/>
                <entry key="restaurantPageComponent" value-ref="restaurantPageComponent"/>
                <entry key="restaurantSearchComponent" value-ref="restaurantSearchComponent"/>
                <entry key="userSearchComponent" value-ref="userSearchComponent"/>
            </map>
        </property>
    </bean>

</beans>