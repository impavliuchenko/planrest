<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
start-state="main">

    <view-state id="main" view="/WEB-INF/views/main.xhtml">

        <var name="userPage" class="com.planrest.objects.UserPageComponent"/>

        <on-entry>
            <evaluate expression="authorizationService.getUserByLogin()" result="viewScope.user"/>
            <set name="userPageComponent.user" value="user"/>
            <set name="conversationScope.userName" value="user.name"/>

            <evaluate expression="userDAOImpl.getFriendsByUserId(user.id)"
                      result="viewScope.allFriends"/>

            <evaluate expression="userWallService.getUserwallsDoneByUserId(user.id)"
                      result="viewScope.userwallRestaurantwalls"/>
            <evaluate expression="userWallService.setUserWallImagesByList(userwallRestaurantwalls)"/>

            <evaluate expression="userWallService.getUserwallsDoneByUserIdCount(user.id)"
                      result="viewScope.userWallRestaurantWallsDoneCount" result-type="long"/>

            <evaluate expression="userWallService.getUserwallsPlanByUserIdCount(user.id)"
                      result="viewScope.userWallRestaurantWallsPlanCount" result-type="long"/>
            
            <evaluate expression="userRatingDAOImpl.getAverageRatingByUserId(user.id)"
                      result="viewScope.averageRating" result-type="double"/>
        </on-entry>

        <transition on="toFriend" to="friend">
            <set name="flowScope.friend" value="userPage.user"/>
        </transition>

        <transition on="toRestaurant" to="restaurant">
            <set name="flowScope.restaurant" value="userPage.restaurant"/>
        </transition>

        <transition on="toMain" to="main"/>

        <transition on="delete" to="main">
            <set name="viewScope.userWallId" value="userPage.userWallId"/>
            <set name="viewScope.restaurantWallId" value="userPage.restaurantWallId"/>
            <evaluate expression="userWallService.deleteUserWallbyUserWallIdAndRestaurantWallId(userWallId, restaurantWallId, user.id)"/>
        </transition>

        <transition on="donePosts">
            <evaluate expression="userWallService.getUserwallsDoneByUserId(user.id)"
                      result="viewScope.userwallRestaurantwalls"/>
            <evaluate expression="userWallService.setUserWallImagesByList(userwallRestaurantwalls)" />
        </transition>

        <transition on="planPosts">
            <evaluate expression="userWallService.getUserwallsPlanByUserId(user.id)"
                      result="viewScope.userwallRestaurantwalls"/>
            <evaluate expression="userWallService.setUserWallImagesByList(userwallRestaurantwalls)"/>
        </transition>

        <transition on="showVisitors">
            <set name="viewScope.restaurantWallId" value="userPage.restaurantWallId"/>
            <evaluate expression="userDAOImpl.getUserWallsByRestaurantWallId(restaurantWallId)"
                      result="viewScope.restaurantWallUsers"/>
            <evaluate expression="userWallService.splitDialog()"/>
            <!--<render fragments="restaurantPostsForm:splitDialog"/>-->
        </transition>

        <transition on="searchRestaurant" to="search">
            <set name="flashScope.isRestaurantSearch" value="true"/>
        </transition>

        <transition on="searchUser" to="search">
            <set name="flashScope.isRestaurantSearch" value="false"/>
        </transition>

    </view-state>

    <view-state id="friend" view="/WEB-INF/views/main.xhtml">

        <var name="userPage" class="com.planrest.objects.UserPageComponent"/>

        <on-entry>
            <set name="viewScope.user" value="friend"/>
            <set name="userPageComponent.user" value="user"/>

            <evaluate expression="userDAOImpl.getFriendsByUserId(friend.id)"
                      result="viewScope.allFriends"/>

            <evaluate expression="userWallService.getUserwallsDoneByUserId(friend.id)"
                      result="viewScope.userwallRestaurantwalls"/>
            <evaluate expression="userWallService.setUserWallImagesByList(userwallRestaurantwalls)" />

            <evaluate expression="userWallService.getUserwallsDoneByUserIdCount(user.id)"
                      result="viewScope.userWallRestaurantWallsDoneCount" result-type="long"/>

            <evaluate expression="userWallService.getUserwallsPlanByUserIdCount(user.id)"
                      result="viewScope.userWallRestaurantWallsPlanCount" result-type="long"/>

            <evaluate expression="userRatingDAOImpl.getAverageRatingByUserId(friend.id)"
                      result="viewScope.averageRating" result-type="double"/>

        </on-entry>

        <transition on="toFriend" to="friend">
            <set name="flowScope.friend" value="userPage.user"/>
        </transition>

        <transition on="toRestaurant" to="restaurant">
            <set name="flowScope.restaurant" value="userPage.restaurant"/>
        </transition>

        <transition on="toMain" to="main"/>

        <transition on="donePosts">
            <evaluate expression="userWallService.getUserwallsDoneByUserId(friend.id)"
                      result="viewScope.userwallRestaurantwalls"/>
            <evaluate expression="userWallService.setUserWallImagesByList(userwallRestaurantwalls)" />
        </transition>

        <transition on="planPosts">
            <evaluate expression="userWallService.getUserwallsPlanByUserId(friend.id)"
                      result="viewScope.userwallRestaurantwalls"/>
            <evaluate expression="userWallService.setUserWallImagesByList(userwallRestaurantwalls)" />
        </transition>

        <transition on="showVisitors">
            <set name="viewScope.restaurantWallId" value="userPage.restaurantWallId"/>
            <evaluate expression="userDAOImpl.getUserWallsByRestaurantWallId(restaurantWallId)"
                      result="viewScope.restaurantWallUsers"/>
            <evaluate expression="userWallService.splitDialog()"/>
            <!--<render fragments="restaurantPostsForm:splitDialog"/>-->
        </transition>

        <transition on="searchRestaurant" to="search">
            <set name="flashScope.isRestaurantSearch" value="true"/>
        </transition>

        <transition on="searchUser" to="search">
            <set name="flashScope.isRestaurantSearch" value="false"/>
        </transition>

    </view-state>

    <view-state id="restaurant" view="/WEB-INF/views/restaurant.xhtml">

        <var name="restaurantPage" class="com.planrest.objects.RestaurantPageComponent"/>

        <on-entry>

            <set name="restaurantPageComponent.restaurant" value="restaurant"/>

            <evaluate expression="restaurantWallService.getRestaurantWallsDoneByRestaurantId(restaurant.id)"
                      result="viewScope.restaurantWalls"/>
            <evaluate expression="restaurantWallService.setRestaurantWallImagesByList(restaurantWalls)" />
            <set name="restaurantPage.eventPlan" value="false"/>

            <evaluate expression="userDAOImpl.getVisitorsByRestaurantId(restaurant.id)"
                      result="viewScope.allVisitors"/>

            <evaluate expression="restaurantWallService.getRestaurantWallsDoneByRestaurantIdCount(restaurant.id)"
                      result="viewScope.restaurantWallsDoneCount" result-type="long"/>

            <evaluate expression="restaurantWallService.getRestaurantWallsPlanByRestaurantIdCount(restaurant.id)"
                      result="viewScope.restaurantWallsPlanCount" result-type="long"/>

            <evaluate expression="restaurantRatingDAOImpl.getAverageRestaurantRatingByRestaurantId(restaurant.id)"
                      result="viewScope.averageRating" result-type="double"/>

        </on-entry>

        <transition on="toMain" to="main"/>

        <transition on="toRestaurant" to="restaurant">
            <set name="flowScope.restaurant" value="restaurantPage.restaurant"/>
        </transition>

        <transition on="repost">
            <set name="viewScope.restaurantRepostingWall" value="restaurantPage.restaurantRepostingWall"/>
            <set name="viewScope.repostComment" value="restaurantPageComponent.repostComment"/>
            <evaluate expression="userWallService.addUserWallByRestaurantWall(restaurantRepostingWall, userName, repostComment)"/>
        </transition>

        <transition on="donePosts">
            <evaluate expression="restaurantWallService.getRestaurantWallsDoneByRestaurantId(restaurant.id)"
                      result="viewScope.restaurantWalls"/>
            <evaluate expression="restaurantWallService.setRestaurantWallImagesByList(restaurantWalls)" />
            <set name="restaurantPage.eventPlan" value="false"/>
        </transition>

        <transition on="planPosts">
            <evaluate expression="restaurantWallService.getRestaurantWallsPlanByRestaurantId(restaurant.id)"
                      result="viewScope.restaurantWalls"/>
            <evaluate expression="restaurantWallService.setRestaurantWallImagesByList(restaurantWalls)" />
            <set name="restaurantPage.eventPlan" value="true"/>
        </transition>

        <transition on="showVisitors">
            <set name="viewScope.restaurantWallId" value="restaurantPage.restaurantWallId"/>
            <evaluate expression="userDAOImpl.getUserWallsByRestaurantWallId(restaurantWallId)"
                      result="viewScope.restaurantWallUsers"/>
            <evaluate expression="restaurantWallService.splitDialog()"/>
            <!--<render fragments="restaurantPostsForm:splitDialog"/>-->
        </transition>

        <transition on="toFriend" to="friend">
            <set name="flowScope.friend" value="restaurantPage.user"/>
        </transition>

        <transition on="searchRestaurant" to="search">
            <set name="flashScope.isRestaurantSearch" value="true"/>
        </transition>

        <transition on="searchUser" to="search">
            <set name="flashScope.isRestaurantSearch" value="false"/>
        </transition>

    </view-state>

    <subflow-state id="search" subflow="search">

        <input name="isRestaurantSearch"/>

        <output name="restaurant"/>
        <output name="friend"/>

        <transition on="home" to="main"/>
        <transition on="user" to="friend"/>
        <transition on="restaurant" to="restaurant"/>
    </subflow-state>

</flow>